#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');
var ncp = require('ncp').ncp;
var rimraf = require('rimraf');
var colors = require('colors');
var program = require('commander');
var watch = require('node-watch');
var pkg = require('../package.json');

program
	.version(pkg.version)
	.option('clean', 'Clean target directories')
	.option('watch', 'Watch for file changes')
	.parse(process.argv);

var cwd = process.cwd();

// If we are watching for changes, when changes detected
// the entry gets put in changedDirs against the source
// directory name. That way, if multiple files change at a time
// we don't do a whole directory copy for each change.
var changedDirs = {};

// Set up periodic function to check for changes
// recorded, and do copy where changes have been detected.
if (program.watch) {
	// Check every second
	setInterval(function () {
		for (var key in changedDirs) {
			if (changedDirs[key] !== null) {
				console.log(('Change in \'' + changedDirs[key].copySrc.underline + '\' detected').bold.magenta);
				// Copy the source directory over to target
				doCopy(changedDirs[key].copySrc, changedDirs[key].copyTgt, true);
				// Set changedDirs value to null
				changedDirs[key] = null;
			}
		}
	}, 1000);
}

try {
	// Attempt to load dimple.json
	var config = require(path.join(cwd, 'dimple.json'));
} catch (e) {
	// Could not load file
	if (e.code === 'MODULE_NOT_FOUND')
		console.error('Could not locate \'dimple.json\''.bold.red);
	else
		console.error(e.toString().bold.red)

	// Exit
	process.exit(1);
}

function doCopy(sourceDir, targetDir, fromWatch) {
	// Check status of sourceDir
	fs.stat(sourceDir, function (err, stats) {
		// If no err then it exists
		if (err === null) {
			// We are only interested in directories, not files
			// Files are silently ignored
			if (stats.isDirectory()) {
				fs.exists(targetDir, function (exists) {
					// If the target directory already exists, remove it
					if (exists)
						rimraf.sync(targetDir);

					// Copy the directory from source to target
					console.log(('Copying \'' + sourceDir.underline + '\' --> \'' + targetDir.underline + '\'').bold.blue);
					ncp(path.resolve(cwd, sourceDir), path.resolve(cwd, targetDir), function (err) {
						if (err)
							console.log(('Failed to copy \'' + sourceDir.underline + '\' --> \'' + targetDir.underline + '\'').bold.red);
						else
							console.log(('Copied \'' + sourceDir.underline + '\' --> \'' + targetDir.underline + '\'').bold.green);
					});
				});
			}
		} else {
			// Directory does not exist
			if (fromWatch) {
				// This obviously did exist before, so remove targetDir
				rimraf(targetDir, function () {
					console.log(('Removed \'' + targetDir.underline + '\'').bold.green);
				});
			} else {
				console.log(('Directory \'' + sourceDir.underline + '\' does not exist').bold.red);
			}
		}
	});
}

// Iterate over groups in config
for (var group in config) {
	(function (group) {
		// Check root source directory exists
		fs.exists(config[group].sourceBaseDir, function (exists) {
			if (exists) {
				fs.exists(config[group].targetBaseDir, function (exists) {
					var dirsToCopy = [];

					if (typeof config[group].copyDirs === 'string' && config[group].copyDirs === '*') {
						// Get all subdirectories in source folder
						dirsToCopy = fs.readdirSync(config[group].sourceBaseDir);
					} else if (Object.prototype.toString.call(config[group].copyDirs) === '[object Array]') {
						// Use directory array from config
						dirsToCopy = config[group].copyDirs;
					} else {
						// Invalid copyDirs
						console.log('Invalid value for \'copyDirs\'. Must be \'*\' or array containing subdirectory names.'.bold.red);
					}

					if (dirsToCopy.length > 0) {
						var copyDirs = function () {
							// Now copy each directory specified in file
							var length = dirsToCopy.length;
							var sourceDir, targetDir;
							for (var i = 0; i < length; i++) {
								sourceDir = (typeof dirsToCopy[i] === 'string') ? dirsToCopy[i] : dirsToCopy[i].source;
								targetDir = (typeof dirsToCopy[i] === 'string') ? path.basename(dirsToCopy[i]) : dirsToCopy[i].target;
								(function (copySrc, copyTgt) {
									if (program.clean) {
										// Remove the target directory
										rimraf(copyTgt, function () {
											console.log(('Removed \'' + copyTgt.underline + '\'').bold.green);
										});
									} else {
										if (program.watch) {
											fs.exists(copySrc, function (exists) {
												if (exists) {
													// If we are watching for changes, when something does change
													// do copy again
													watch(copySrc, function (filename) {
														if (changedDirs[copySrc] === undefined || changedDirs[copySrc] === null) {
															changedDirs[copySrc] = {
																copySrc: copySrc,
																copyTgt: copyTgt
															};
														}
													});
												}
											});
										}
										// Do copy now
										doCopy(copySrc, copyTgt, false);
									}
								})(
									path.join(config[group].sourceBaseDir, sourceDir),
									path.join(config[group].targetBaseDir, targetDir)
								);
							}
						};

						// If target directory does not exist, create it
						if (exists)
							copyDirs();
						else
							fs.mkdir(config[group].targetBaseDir, copyDirs);
					}
				});
			} else {
				// If the source directory does not exist then there's not much
				// we can do but ignore it and proceed with the rest.
				console.log(('Directory \'' + config[group].sourceBaseDir.underline + '\' does not exist').bold.red);
			}
		});
	})(group);
}
